{
  "moddas": {
    "webda/aggregator": "lib/stores/aggregator:default",
    "webda/aliasstore": "lib/stores/aliasstore:AliasStore",
    "webda/cryptoservice": "lib/services/cryptoservice:default",
    "webda/debugmailer": "lib/services/debugmailer:default",
    "webda/echoservice": "lib/services/echo:EchoService",
    "webda/kubernetesconfigurationservice": "lib/services/kubernetesconfiguration:KubernetesConfigurationService",
    "webda/mailer": "lib/services/mailer:Mailer",
    "webda/mapper": "lib/stores/mapper:default",
    "webda/multinotificationservice": "lib/services/notificationservice:default",
    "webda/prometheusservice": "lib/services/prometheus:PrometheusService",
    "webda/proxyservice": "lib/services/proxy:ProxyService",
    "webda/resourceservice": "lib/services/resource:default",
    "webda/versionservice": "lib/services/version:VersionService"
  },
  "beans": {},
  "models": {},
  "deployers": {},
  "schemas": {
    "webda/cryptoservice": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "To expose JWKS"
        },
        "keyActiveLifespan": {
          "type": "number",
          "description": "Number of hours a key should be used for encryption\n\nif auto-rotate is not set this"
        },
        "keyLifespan": {
          "type": "number",
          "description": "Number of hours allowed to decrypt data encrypted with this key"
        },
        "autoRotate": {
          "type": "number",
          "description": "Try to rotate keys when they expire in days"
        },
        "autoCreate": {
          "type": "boolean",
          "description": "Create first set of key if does not exist"
        },
        "asymetricType": {
          "type": "string",
          "enum": [
            "rsa",
            "dsa",
            "ec",
            "ed25519",
            "ed448",
            "x25519",
            "x448",
            "dh"
          ],
          "description": "Type of asymetric key\n\nhttps://nodejs.org/api/crypto.html#cryptogeneratekeypairsynctype-options https://nodejs.org/docs/latest-v14.x/api/crypto.html#crypto_crypto_generatekeypairsync_type_options"
        },
        "asymetricOptions": {
          "type": "object",
          "properties": {
            "modulusLength": {
              "type": "number",
              "default": 2048
            },
            "namedCurve": {
              "type": "string",
              "description": "Only if asymetricType \"ec\""
            },
            "publicKeyEncoding": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "spki",
                    "pkcs1"
                  ],
                  "default": "spki"
                },
                "format": {
                  "type": "string",
                  "const": "pem"
                }
              }
            },
            "privateKeyEncoding": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "pkcs1",
                    "pkcs8",
                    "sec1"
                  ],
                  "description": "https://nodejs.org/docs/latest-v14.x/api/crypto.html#crypto_keyobject_export_options",
                  "default": "pkcs8"
                },
                "format": {
                  "type": "string",
                  "const": "pem"
                },
                "cipher": {
                  "type": "string"
                },
                "passphrase": {
                  "type": "string"
                }
              }
            }
          },
          "description": "Options for asymetric generation"
        },
        "symetricKeyLength": {
          "type": "number",
          "default": 256
        },
        "symetricCipher": {
          "type": "string",
          "default": "aes-256-ctr"
        },
        "jwt": {
          "type": "object",
          "properties": {
            "secretOrPublicKey": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "BYTES_PER_ELEMENT": {
                      "type": "number"
                    },
                    "buffer": {
                      "$ref": "#/definitions/ArrayBufferLike"
                    },
                    "byteLength": {
                      "type": "number"
                    },
                    "byteOffset": {
                      "type": "number"
                    },
                    "length": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "BYTES_PER_ELEMENT",
                    "buffer",
                    "byteLength",
                    "byteOffset",
                    "length"
                  ],
                  "description": "Raw data is stored in instances of the Buffer class. A Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.  A Buffer cannot be resized. Valid string encodings: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'"
                },
                {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "passphrase": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "passphrase"
                  ]
                }
              ],
              "description": "Secret to use with JWT"
            },
            "algorithm": {
              "type": "string",
              "enum": [
                "HS256",
                "HS384",
                "HS512",
                "RS256",
                "RS384",
                "RS512",
                "PS256",
                "PS384",
                "PS512",
                "ES256",
                "ES384",
                "ES512"
              ],
              "description": "Algorithm for JWT token",
              "default": "HS256"
            },
            "expiresIn": {
              "type": [
                "number",
                "string"
              ],
              "description": "expressed in seconds or a string describing a time span zeit/ms.\n\nEg: 60, \"2 days\", \"10h\", \"7d\". A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default (\"120\" is equal to \"120ms\")."
            },
            "audience": {
              "type": "string",
              "description": "Audience for the jwt"
            },
            "issuer": {
              "type": "string",
              "description": "Issuer of the token"
            },
            "subject": {
              "type": "string",
              "description": "Subject for JWT"
            },
            "keyid": {}
          },
          "description": "Default JWT options"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "asymetricType",
        "keyActiveLifespan",
        "keyLifespan",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "ArrayBufferLike": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "byteLength": {
                  "type": "number"
                }
              },
              "required": [
                "byteLength"
              ]
            },
            {}
          ]
        }
      },
      "title": "CryptoService"
    },
    "webda/multinotificationservice": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "senders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Notification service that will send The order of the array is important if multiple is false When multiple is `false` the first available NotificationService will be used, otherwise every available NotificationService will be used"
        },
        "multiple": {
          "type": "boolean",
          "description": "Define if it sends one or several notification per user",
          "default": false
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "senders",
        "type"
      ],
      "description": "Parameters for multi notification service",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MultiNotificationService"
    },
    "webda/mailer": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "templates": {
          "type": "string",
          "description": "Specify which foldeer contains templates",
          "default": "templates"
        },
        "templatesEngine": {
          "type": "string",
          "description": "Template engine to usee",
          "default": "mustache"
        },
        "sender": {
          "type": "string",
          "description": "Define the default sender"
        },
        "emailTemplateOptions": {},
        "transport": {
          "type": "string",
          "description": "Define the type of transport to use"
        },
        "SES": {
          "description": "SES AWS Bean if transport === \"ses\""
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "SES",
        "sender",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Mailer"
    },
    "webda/debugmailer": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "type"
      ],
      "description": "Interface to specify the Service parameters",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DebugMailer"
    },
    "webda/echoservice": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "Url to expose the service"
        },
        "mime": {
          "type": "string",
          "description": "Mime of the result"
        },
        "result": {
          "anyOf": [
            {
              "type": "string"
            },
            {}
          ],
          "description": "result to write on the url"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "result",
        "type",
        "url"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EchoService"
    },
    "webda/kubernetesconfigurationservice": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "checkInterval": {
          "type": "number",
          "description": "Check configuration every {checkInterval} seconds"
        },
        "source": {
          "type": "string",
          "description": "Format sourceServiceName:sourceId"
        },
        "default": {
          "description": "Default configuration to use"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "default",
        "source",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "KubernetesConfigurationService"
    },
    "webda/prometheusservice": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content",
          "default": "/metrics"
        },
        "portNumber": {
          "type": "number",
          "description": "If defined will launch another http server to serve the scaper"
        },
        "bind": {
          "type": "string",
          "description": "If defined along with portNumber used to bind specific address for dedicated http server"
        },
        "includeNodeMetrics": {
          "type": "boolean",
          "description": "Include NodeJS engine metrics",
          "default": true
        },
        "includeRequestMetrics": {
          "type": "boolean",
          "description": "Include request served by Webda\n\nIt should generate common http_* metrics",
          "default": true
        },
        "partitionHistogram": {
          "type": "boolean",
          "description": "Do not partition histogram with requests labels"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels to add"
        },
        "prefix": {
          "type": "string",
          "description": "Prefix to add to metrics"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "includeNodeMetrics",
        "includeRequestMetrics",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PrometheusService"
    },
    "webda/proxyservice": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL to expose"
        },
        "backend": {
          "type": "string",
          "description": "URL to proxy to"
        },
        "requireAuthentication": {
          "type": "boolean",
          "description": "Helper to refuse any request if user is not auth"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "backend",
        "requireAuthentication",
        "type"
      ],
      "description": "Proxy to a backend service",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProxyService"
    },
    "webda/resourceservice": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content",
          "default": "resources"
        },
        "folder": {
          "type": "string",
          "description": "Folder to server",
          "default": "\".\" + url"
        },
        "rootRedirect": {
          "type": "boolean",
          "description": "Add the / root to redirect to /{url}",
          "default": false
        },
        "index": {
          "type": "string",
          "description": "Index file",
          "default": "index.html"
        },
        "indexFallback": {
          "type": "boolean",
          "description": "Return the index file for any unfound resource Useful for single page application",
          "default": true
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "type"
      ],
      "description": "ResourceService parameters",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ResourceService"
    },
    "webda/versionservice": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content",
          "default": "/version"
        },
        "version": {
          "type": "string",
          "description": "To force version otherwise would read from package.json"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "type"
      ],
      "description": "Version parameters",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VersionService"
    },
    "webda/mapper": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Field to duplicate"
        },
        "source": {
          "type": "string",
          "description": "Source service"
        },
        "target": {
          "type": "string",
          "description": "Target store"
        },
        "async": {
          "type": "boolean",
          "description": "Async",
          "default": false
        },
        "attribute": {
          "type": "string",
          "description": "Attribute to use for link\n\nDepending on the type  - string[]: will consider each string as id  - string: will be consider as id  - Object: each keys will be consider as id"
        },
        "targetAttribute": {
          "type": "string",
          "description": "The object will contain a Mapper"
        },
        "cascade": {
          "type": "boolean",
          "description": "Delete source if target object is deleted"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "async",
        "attribute",
        "cascade",
        "fields",
        "source",
        "target",
        "targetAttribute",
        "type"
      ],
      "description": "Mapper configuration",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Mapper"
    },
    "webda/aggregator": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Field to duplicate"
        },
        "source": {
          "type": "string",
          "description": "Source service"
        },
        "target": {
          "type": "string",
          "description": "Target store"
        },
        "async": {
          "type": "boolean",
          "description": "Async",
          "default": false
        },
        "attribute": {
          "type": "string",
          "description": "Attribute to use for link\n\nDepending on the type  - string[]: will consider each string as id  - string: will be consider as id  - Object: each keys will be consider as id"
        },
        "targetAttribute": {
          "type": "string",
          "description": "The object will contain a Mapper"
        },
        "cascade": {
          "type": "boolean",
          "description": "Delete source if target object is deleted"
        },
        "key": {
          "type": "string",
          "default": "index"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "async",
        "attribute",
        "cascade",
        "fields",
        "key",
        "source",
        "target",
        "targetAttribute",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Aggregator"
    },
    "webda/aliasstore": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "model": {
          "type": "string",
          "description": "Webda model to use within the Store",
          "default": "Webda/CoreModel"
        },
        "models": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Different models managed by this store"
        },
        "asyncDelete": {
          "type": "boolean",
          "description": "async delete"
        },
        "expose": {
          "$ref": "#/definitions/ExposeParameters",
          "description": "Expose the service to an urls"
        },
        "strict": {
          "type": "boolean",
          "description": "Allow to load object that does not have the type data\n\nIf set to true, then the Store will only managed the defined _model and no model extending this one",
          "default": false
        },
        "defaultModel": {
          "type": "boolean",
          "description": "When __type model not found, use the model If strict is setup this parameter is not used",
          "default": true
        },
        "forceModel": {
          "type": "boolean",
          "description": "If set, Store will ignore the __type",
          "default": false
        },
        "slowQueryThreshold": {
          "type": "number",
          "description": "Slow query threshold",
          "default": 30000
        },
        "parent": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "condition": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "condition"
          ],
          "description": "Parent of the store\n\nIf parent is specified the url route is relative to it"
        },
        "graphql": {
          "type": "boolean",
          "description": "For future use in our GraphQL api\n\nExpose this store in the graphql"
        },
        "targetStore": {
          "type": "string",
          "description": "Store to alias"
        },
        "idTemplate": {
          "type": "string",
          "description": "Store to alias"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "asyncDelete",
        "idTemplate",
        "slowQueryThreshold",
        "targetStore",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "ExposeParameters": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "URL endpoint to use to expose REST Resources API",
              "default": "service.getName().toLowerCase()"
            },
            "restrict": {
              "type": "object",
              "properties": {
                "create": {
                  "type": "boolean",
                  "description": "Do not expose the POST"
                },
                "update": {
                  "type": "boolean",
                  "description": "Do not expose the PUT and PATCH"
                },
                "get": {
                  "type": "boolean",
                  "description": "Do not expose the GET"
                },
                "delete": {
                  "type": "boolean",
                  "description": "Do not expose the DELETE"
                },
                "query": {
                  "type": "boolean",
                  "description": "Do not expose the query endpoint"
                }
              },
              "description": "You can restrict any part of the CRUD",
              "default": {}
            },
            "queryMethod": {
              "type": "string",
              "enum": [
                "PUT",
                "GET"
              ],
              "description": "For confidentiality sometimes you might prefer to expose query through PUT To avoid GET logging",
              "default": "GET"
            }
          }
        }
      },
      "title": "AliasStore"
    }
  },
  "graph": {}
}