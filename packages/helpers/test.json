{
  "description": "Configuration from Webda version >= 1.0",
  "type": "object",
  "properties": {
    "version": {
      "minimum": 2,
      "type": "number"
    },
    "module": {
      "$ref": "#/definitions/Module"
    },
    "services": {
      "type": "object",
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/ServiceType$webda$authentication"
          },
          {
            "$ref": "#/definitions/ServiceType$webda$filestore"
          },
          {
            "$ref": "#/definitions/ServiceType$webda$memorystore"
          },
          {
            "$ref": "#/definitions/ServiceType$webda$filebinary"
          },
          {
            "$ref": "#/definitions/ServiceType$webda$debugmailer"
          },
          {
            "$ref": "#/definitions/ServiceType$webda$mailer"
          },
          {
            "$ref": "#/definitions/ServiceType$webda$asyncevents"
          },
          {
            "$ref": "#/definitions/ServiceType$webda$resourceservice"
          },
          {
            "$ref": "#/definitions/ServiceType$webda$memoryqueue"
          },
          {
            "$ref": "#/definitions/ServiceType$webda$configurationservice"
          },
          {
            "$ref": "#/definitions/ServiceType$webda$fileconfigurationservice"
          },
          {
            "$ref": "#/definitions/ServiceType$webda$kubernetesconfigurationservice"
          },
          {
            "$ref": "#/definitions/ServiceType$webda$consolelogger"
          },
          {
            "$ref": "#/definitions/ServiceType$webda$memorylogger"
          }
        ]
      }
    },
    "parameters": {
      "type": "object",
      "additionalProperties": {},
      "properties": {
        "cookie": {
          "type": "object",
          "properties": {
            "sameSite": {
              "enum": [
                "Lax",
                "None",
                "Strict"
              ],
              "type": "string"
            },
            "domain": {
              "type": "string"
            },
            "maxAge": {
              "minimum": 1,
              "type": "number"
            },
            "path": {
              "type": "string"
            }
          },
          "required": [
            "domain",
            "maxAge",
            "path",
            "sameSite"
          ]
        }
      }
    },
    "openapi": {}
  },
  "required": [
    "module",
    "version"
  ],
  "definitions": {
    "JSONSchema6": {
      "type": "object",
      "properties": {
        "$id": {
          "type": "string"
        },
        "$ref": {
          "type": "string"
        },
        "$schema": {
          "description": "Meta schema\n\nRecommended values:\n- 'http://json-schema.org/schema#'\n- 'http://json-schema.org/hyper-schema#'\n- 'http://json-schema.org/draft-06/schema#'\n- 'http://json-schema.org/draft-06/hyper-schema#'",
          "type": "string"
        },
        "multipleOf": {
          "description": "Must be strictly greater than 0.\nA numeric instance is valid only if division by this keyword's value results in an integer.",
          "type": "number"
        },
        "maximum": {
          "description": "Representing an inclusive upper limit for a numeric instance.\nThis keyword validates only if the instance is less than or exactly equal to \"maximum\".",
          "type": "number"
        },
        "exclusiveMaximum": {
          "description": "Representing an exclusive upper limit for a numeric instance.\nThis keyword validates only if the instance is strictly less than (not equal to) to \"exclusiveMaximum\".",
          "type": "number"
        },
        "minimum": {
          "description": "Representing an inclusive lower limit for a numeric instance.\nThis keyword validates only if the instance is greater than or exactly equal to \"minimum\".",
          "type": "number"
        },
        "exclusiveMinimum": {
          "description": "Representing an exclusive lower limit for a numeric instance.\nThis keyword validates only if the instance is strictly greater than (not equal to) to \"exclusiveMinimum\".",
          "type": "number"
        },
        "maxLength": {
          "description": "Must be a non-negative integer.\nA string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword.",
          "type": "number"
        },
        "minLength": {
          "description": "Must be a non-negative integer.\nA string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword.\nOmitting this keyword has the same behavior as a value of 0.",
          "type": "number"
        },
        "pattern": {
          "description": "Should be a valid regular expression, according to the ECMA 262 regular expression dialect.",
          "type": "string"
        },
        "items": {
          "description": "This keyword determines how child instances validate for arrays, and does not directly validate the immediate instance itself.\nOmitting this keyword has the same behavior as an empty schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/JSONSchema6"
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/JSONSchema6"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              }
            },
            {
              "type": "boolean"
            }
          ]
        },
        "additionalItems": {
          "description": "This keyword determines how child instances validate for arrays, and does not directly validate the immediate instance itself.\nIf \"items\" is an array of schemas, validation succeeds if every instance element\nat a position greater than the size of \"items\" validates against \"additionalItems\".\nOtherwise, \"additionalItems\" MUST be ignored, as the \"items\" schema\n(possibly the default value of an empty schema) is applied to all elements.\nOmitting this keyword has the same behavior as an empty schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/JSONSchema6"
            },
            {
              "type": "boolean"
            }
          ]
        },
        "maxItems": {
          "description": "Must be a non-negative integer.\nAn array instance is valid against \"maxItems\" if its size is less than, or equal to, the value of this keyword.",
          "type": "number"
        },
        "minItems": {
          "description": "Must be a non-negative integer.\nAn array instance is valid against \"maxItems\" if its size is greater than, or equal to, the value of this keyword.\nOmitting this keyword has the same behavior as a value of 0.",
          "type": "number"
        },
        "uniqueItems": {
          "description": "If this keyword has boolean value false, the instance validates successfully.\nIf it has boolean value true, the instance validates successfully if all of its elements are unique.\nOmitting this keyword has the same behavior as a value of false.",
          "type": "boolean"
        },
        "contains": {
          "description": "An array instance is valid against \"contains\" if at least one of its elements is valid against the given schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/JSONSchema6"
            },
            {
              "type": "boolean"
            }
          ]
        },
        "maxProperties": {
          "description": "Must be a non-negative integer.\nAn object instance is valid against \"maxProperties\" if its number of properties is less than, or equal to, the value of this keyword.",
          "type": "number"
        },
        "minProperties": {
          "description": "Must be a non-negative integer.\nAn object instance is valid against \"maxProperties\" if its number of properties is greater than,\nor equal to, the value of this keyword.\nOmitting this keyword has the same behavior as a value of 0.",
          "type": "number"
        },
        "required": {
          "description": "Elements of this array must be unique.\nAn object instance is valid against this keyword if every item in the array is the name of a property in the instance.\nOmitting this keyword has the same behavior as an empty array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "description": "This keyword determines how child instances validate for objects, and does not directly validate the immediate instance itself.\nValidation succeeds if, for each name that appears in both the instance and as a name within this keyword's value,\nthe child instance for that name successfully validates against the corresponding schema.\nOmitting this keyword has the same behavior as an empty object.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/JSONSchema6"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "patternProperties": {
          "description": "This attribute is an object that defines the schema for a set of property names of an object instance.\nThe name of each property of this attribute's object is a regular expression pattern in the ECMA 262, while the value is a schema.\nIf the pattern matches the name of a property on the instance object, the value of the instance's property\nMUST be valid against the pattern name's schema value.\nOmitting this keyword has the same behavior as an empty object.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/JSONSchema6"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "additionalProperties": {
          "description": "This attribute defines a schema for all properties that are not explicitly defined in an object type definition.\nIf specified, the value MUST be a schema or a boolean.\nIf false is provided, no additional properties are allowed beyond the properties defined in the schema.\nThe default value is an empty schema which allows any value for additional properties.",
          "anyOf": [
            {
              "$ref": "#/definitions/JSONSchema6"
            },
            {
              "type": "boolean"
            }
          ]
        },
        "dependencies": {
          "description": "This keyword specifies rules that are evaluated if the instance is an object and contains a certain property.\nEach property specifies a dependency.\nIf the dependency value is an array, each element in the array must be unique.\nOmitting this keyword has the same behavior as an empty object.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "$ref": "#/definitions/JSONSchema6"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "propertyNames": {
          "description": "Takes a schema which validates the names of all properties rather than their values.\nNote the property name that the schema is testing will always be a string.\nOmitting this keyword has the same behavior as an empty schema.",
          "anyOf": [
            {
              "$ref": "#/definitions/JSONSchema6"
            },
            {
              "type": "boolean"
            }
          ]
        },
        "enum": {
          "description": "This provides an enumeration of all possible values that are valid\nfor the instance property. This MUST be an array, and each item in\nthe array represents a possible value for the instance value. If\nthis attribute is defined, the instance value MUST be one of the\nvalues in the array in order for the schema to be valid.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JSONSchema6Type"
          }
        },
        "const": {
          "$ref": "#/definitions/JSONSchema6Type",
          "description": "More readable form of a one-element \"enum\""
        },
        "type": {
          "description": "A single type, or a union of simple types",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "enum": [
                  "any",
                  "array",
                  "boolean",
                  "integer",
                  "null",
                  "number",
                  "object",
                  "string"
                ],
                "type": "string"
              }
            },
            {
              "enum": [
                "any",
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string"
              ],
              "type": "string"
            }
          ]
        },
        "allOf": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/JSONSchema6"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "anyOf": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/JSONSchema6"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "oneOf": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/JSONSchema6"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "not": {
          "description": "JSON Schema V6",
          "anyOf": [
            {
              "$ref": "#/definitions/JSONSchema6"
            },
            {
              "type": "boolean"
            }
          ]
        },
        "definitions": {
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/JSONSchema6"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "title": {
          "description": "This attribute is a string that provides a short description of the instance property.",
          "type": "string"
        },
        "description": {
          "description": "This attribute is a string that provides a full description of the of purpose the instance property.",
          "type": "string"
        },
        "default": {
          "$ref": "#/definitions/JSONSchema6Type",
          "description": "This keyword can be used to supply a default JSON value associated with a particular schema.\nIt is RECOMMENDED that a default value be valid against the associated schema."
        },
        "examples": {
          "description": "Array of examples with no validation effect the value of \"default\" is usable as an example without repeating it under this keyword",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JSONSchema6Type"
          }
        },
        "format": {
          "type": "string"
        }
      }
    },
    "JSONSchema6Object": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/JSONSchema6Type"
      }
    },
    "JSONSchema6Type": {
      "anyOf": [
        {
          "$ref": "#/definitions/JSONSchema6Object"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^[0-9]+$": {
              "$ref": "#/definitions/JSONSchema6Type"
            }
          }
        },
        {
          "type": [
            "string",
            "number",
            "boolean"
          ]
        }
      ]
    },
    "Module": {
      "description": "A Webda module is a NPM package\n\nIt contains one or more Modda to provide features",
      "type": "object",
      "properties": {
        "services": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "models": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "deployers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "schemas": {
          "description": "Schemas for services, deployers and coremodel",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JSONSchema6"
          }
        }
      }
    },
    "ServicesType": {
      "type": "string",
      "enum": [
        "webda/authentication",
        "webda/filestore",
        "webda/memorystore",
        "webda/filebinary",
        "webda/debugmailer",
        "webda/mailer",
        "webda/asyncevents",
        "webda/resourceservice",
        "webda/memoryqueue",
        "webda/configurationservice",
        "webda/fileconfigurationservice",
        "webda/kubernetesconfigurationservice",
        "webda/consolelogger",
        "webda/memorylogger",
        "0/",
        "webda/cloudwatchlogger",
        "webda/dynamostore",
        "webda/s3binary",
        "webda/awssecretsmanager",
        "webda/sqsqueue",
        "webda/elasticsearchservice",
        "webda/profiler",
        "webdademo/customreusableservice"
      ]
    },
    "ServiceType$webda$authentication": {
      "type": "object",
      "properties": {
        "identStore": {
          "description": "Idents store for authentication identifiers",
          "default": "idents",
          "type": "string"
        },
        "userStore": {
          "description": "User store for authentication users",
          "default": "users",
          "type": "string"
        },
        "url": {
          "default": "/auth",
          "type": "string"
        },
        "email": {
          "description": "Enable the email authentication",
          "type": "object",
          "properties": {
            "mailer": {
              "description": "Mailer service name",
              "type": "string"
            },
            "postValidation": {
              "description": "Allow user to create their account without validating their email first",
              "type": "boolean"
            },
            "skipEmailValidation": {
              "description": "Do not even validate the email at all",
              "type": "boolean"
            },
            "delay": {
              "description": "Minimal delay between two password recovery or validation email",
              "default": "3600000 * 4",
              "type": "number"
            }
          },
          "required": [
            "delay",
            "postValidation",
            "skipEmailValidation"
          ]
        },
        "password": {
          "type": "object",
          "properties": {
            "verifier": {
              "description": "Password verifier Service name",
              "type": "string"
            },
            "regexp": {
              "description": "Regexp that password must check",
              "default": "{8,}",
              "type": "string"
            }
          }
        },
        "salt": {
          "description": "Number of salt iteration for bcrypt.hashSync",
          "type": "string"
        },
        "failureRedirect": {
          "description": "Redirect to this page when email validation failed",
          "type": "string"
        },
        "successRedirect": {
          "description": "Redirect to this page when email validation succeed",
          "type": "string"
        },
        "type": {
          "description": "Type of the service",
          "type": "string",
          "pattern": "([wW][eE][bB][dD][aA]/)?[aA][uU][tT][hH][eE][nN][tT][iI][cC][aA][tT][iI][oO][nN]"
        }
      },
      "required": [
        "type"
      ]
    },
    "MapStoreParameter": {
      "type": "object",
      "properties": {
        "key": {
          "description": "Key on the current model which holds the collection",
          "type": "string"
        },
        "fields": {
          "description": "Other fields to duplicate inside the model",
          "type": "string"
        }
      },
      "required": [
        "fields",
        "key"
      ]
    },
    "ServiceType$webda$filestore": {
      "type": "object",
      "properties": {
        "folder": {
          "description": "Local path where to store all `json` files",
          "type": "string"
        },
        "beautify": {
          "description": "Parameter sent to JSON.stringiy when storing the json",
          "type": [
            "string",
            "number"
          ]
        },
        "lastUpdateField": {
          "description": "Field to store the lastUpdate of the object",
          "default": "_lastUpdate",
          "type": "string"
        },
        "creationDateField": {
          "description": "Field to store the creationDate of the object",
          "default": "_creationDate",
          "type": "string"
        },
        "model": {
          "description": "Webda model to use within the Store",
          "default": "Webda/CoreModel",
          "type": "string"
        },
        "index": {
          "description": "Create an index object that link all other objects uuid",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "map": {
          "description": "You can define a Map between different Stores\n\n{@link Pages/pages/Store}",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MapStoreParameter"
          }
        },
        "asyncDelete": {
          "description": "async delete",
          "type": "boolean"
        },
        "expose": {
          "description": "Expose the service to an urls",
          "type": "object",
          "properties": {
            "url": {
              "description": "URL endpoint to use to expose REST Resources API",
              "default": "service.getName().toLowerCase()",
              "type": "string"
            },
            "restrict": {
              "description": "You can restrict any part of the CRUD",
              "default": {},
              "type": "object",
              "properties": {
                "create": {
                  "description": "Do not expose the POST",
                  "type": "boolean"
                },
                "update": {
                  "description": "Do not expose the PUT and PATCH",
                  "type": "boolean"
                },
                "get": {
                  "description": "Do not expose the GET",
                  "type": "boolean"
                },
                "delete": {
                  "description": "Do not expose the DELETE",
                  "type": "boolean"
                }
              }
            }
          }
        },
        "type": {
          "description": "Type of the service",
          "type": "string",
          "pattern": "([wW][eE][bB][dD][aA]/)?[fF][iI][lL][eE][sS][tT][oO][rR][eE]"
        }
      },
      "required": [
        "type"
      ]
    },
    "ServiceType$webda$memorystore": {
      "type": "object",
      "properties": {
        "lastUpdateField": {
          "description": "Field to store the lastUpdate of the object",
          "default": "_lastUpdate",
          "type": "string"
        },
        "creationDateField": {
          "description": "Field to store the creationDate of the object",
          "default": "_creationDate",
          "type": "string"
        },
        "model": {
          "description": "Webda model to use within the Store",
          "default": "Webda/CoreModel",
          "type": "string"
        },
        "index": {
          "description": "Create an index object that link all other objects uuid",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "map": {
          "description": "You can define a Map between different Stores\n\n{@link Pages/pages/Store}",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/MapStoreParameter"
          }
        },
        "asyncDelete": {
          "description": "async delete",
          "type": "boolean"
        },
        "expose": {
          "description": "Expose the service to an urls",
          "type": "object",
          "properties": {
            "url": {
              "description": "URL endpoint to use to expose REST Resources API",
              "default": "service.getName().toLowerCase()",
              "type": "string"
            },
            "restrict": {
              "description": "You can restrict any part of the CRUD",
              "default": {},
              "type": "object",
              "properties": {
                "create": {
                  "description": "Do not expose the POST",
                  "type": "boolean"
                },
                "update": {
                  "description": "Do not expose the PUT and PATCH",
                  "type": "boolean"
                },
                "get": {
                  "description": "Do not expose the GET",
                  "type": "boolean"
                },
                "delete": {
                  "description": "Do not expose the DELETE",
                  "type": "boolean"
                }
              }
            }
          }
        },
        "type": {
          "description": "Type of the service",
          "type": "string",
          "pattern": "([wW][eE][bB][dD][aA]/)?[mM][eE][mM][oO][rR][yY][sS][tT][oO][rR][eE]"
        }
      },
      "required": [
        "type"
      ]
    },
    "ServiceType$webda$filebinary": {
      "type": "object",
      "properties": {
        "folder": {
          "description": "Define the folder to store objects in",
          "type": "string"
        },
        "map": {
          "description": "Define the map to Object collection",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "expose": {
          "description": "Expose the service to http",
          "type": "object",
          "properties": {
            "url": {
              "description": "URL to expose the service to",
              "type": "string"
            },
            "restrict": {
              "description": "Restrict some APIs",
              "type": "object",
              "properties": {
                "get": {
                  "description": "Restrict GET",
                  "type": "boolean"
                },
                "create": {
                  "description": "Restrict POST",
                  "type": "boolean"
                },
                "delete": {
                  "description": "Restrict DELETE",
                  "type": "boolean"
                }
              }
            }
          },
          "required": [
            "url"
          ]
        },
        "type": {
          "description": "Type of the service",
          "type": "string",
          "pattern": "([wW][eE][bB][dD][aA]/)?[fF][iI][lL][eE][bB][iI][nN][aA][rR][yY]"
        }
      },
      "required": [
        "type"
      ]
    },
    "ServiceType$webda$debugmailer": {
      "description": "Interface to specify the Service parameters",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the service",
          "type": "string",
          "pattern": "([wW][eE][bB][dD][aA]/)?[dD][eE][bB][uU][gG][mM][aA][iI][lL][eE][rR]"
        }
      },
      "required": [
        "type"
      ]
    },
    "ServiceType$webda$mailer": {
      "type": "object",
      "properties": {
        "templates": {
          "description": "Specify which foldeer contains templates",
          "default": "templates",
          "type": "string"
        },
        "templatesEngine": {
          "description": "Template engine to usee",
          "default": "mustache",
          "type": "string"
        },
        "sender": {
          "description": "Define the default sender",
          "type": "string"
        },
        "type": {
          "description": "Type of the service",
          "type": "string",
          "pattern": "([wW][eE][bB][dD][aA]/)?[mM][aA][iI][lL][eE][rR]"
        }
      },
      "required": [
        "type"
      ]
    },
    "ServiceType$webda$asyncevents": {
      "type": "object",
      "properties": {
        "queues": {
          "description": "Queues to post async events to",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sync": {
          "description": "Make the event sending asynchronous",
          "type": "boolean",
          "default": false
        },
        "type": {
          "description": "Type of the service",
          "type": "string",
          "pattern": "([wW][eE][bB][dD][aA]/)?[aA][sS][yY][nN][cC][eE][vV][eE][nN][tT][sS]"
        }
      },
      "required": [
        "type"
      ]
    },
    "ServiceType$webda$resourceservice": {
      "description": "ResourceService parameters",
      "type": "object",
      "properties": {
        "url": {
          "description": "URL on which to serve the content",
          "default": "resources",
          "type": "string"
        },
        "folder": {
          "description": "Folder to server",
          "default": "\".\" + url",
          "type": "string"
        },
        "rootRedirect": {
          "description": "Add the / root to redirect to /{url}",
          "default": false,
          "type": "boolean"
        },
        "type": {
          "description": "Type of the service",
          "type": "string",
          "pattern": "([wW][eE][bB][dD][aA]/)?[rR][eE][sS][oO][uU][rR][cC][eE][sS][eE][rR][vV][iI][cC][eE]"
        }
      },
      "required": [
        "type"
      ]
    },
    "ServiceType$webda$memoryqueue": {
      "type": "object",
      "properties": {
        "expire": {
          "description": "Number of seconds before droping message",
          "default": 30,
          "type": "number"
        },
        "type": {
          "description": "Type of the service",
          "type": "string",
          "pattern": "([wW][eE][bB][dD][aA]/)?[mM][eE][mM][oO][rR][yY][qQ][uU][eE][uU][eE]"
        }
      },
      "required": [
        "type"
      ]
    },
    "ServiceType$webda$configurationservice": {
      "type": "object",
      "properties": {
        "checkInterval": {
          "description": "Check configuration every {checkInterval} seconds",
          "type": "number"
        },
        "source": {
          "description": "Format beanName:method",
          "type": "string"
        },
        "default": {
          "description": "Default configuration to use"
        },
        "type": {
          "description": "Type of the service",
          "type": "string",
          "pattern": "([wW][eE][bB][dD][aA]/)?[cC][oO][nN][fF][iI][gG][uU][rR][aA][tT][iI][oO][nN][sS][eE][rR][vV][iI][cC][eE]"
        }
      },
      "required": [
        "type"
      ]
    },
    "ServiceType$webda$fileconfigurationservice": {
      "type": "object",
      "properties": {
        "checkInterval": {
          "description": "Check configuration every {checkInterval} seconds",
          "type": "number"
        },
        "source": {
          "description": "Format beanName:method",
          "type": "string"
        },
        "default": {
          "description": "Default configuration to use"
        },
        "type": {
          "description": "Type of the service",
          "type": "string",
          "pattern": "([wW][eE][bB][dD][aA]/)?[fF][iI][lL][eE][cC][oO][nN][fF][iI][gG][uU][rR][aA][tT][iI][oO][nN][sS][eE][rR][vV][iI][cC][eE]"
        }
      },
      "required": [
        "type"
      ]
    },
    "ServiceType$webda$kubernetesconfigurationservice": {
      "type": "object",
      "properties": {
        "checkInterval": {
          "description": "Check configuration every {checkInterval} seconds",
          "type": "number"
        },
        "source": {
          "description": "Format beanName:method",
          "type": "string"
        },
        "default": {
          "description": "Default configuration to use"
        },
        "type": {
          "description": "Type of the service",
          "type": "string",
          "pattern": "([wW][eE][bB][dD][aA]/)?[kK][uU][bB][eE][rR][nN][eE][tT][eE][sS][cC][oO][nN][fF][iI][gG][uU][rR][aA][tT][iI][oO][nN][sS][eE][rR][vV][iI][cC][eE]"
        }
      },
      "required": [
        "type"
      ]
    },
    "WorkerLogLevel": {
      "description": "LogLevel as intersection to compare with integer values",
      "enum": [
        "DEBUG",
        "ERROR",
        "INFO",
        "TRACE",
        "WARN"
      ],
      "type": "string"
    },
    "ServiceType$webda$consolelogger": {
      "type": "object",
      "properties": {
        "format": {
          "type": "string"
        },
        "logLevel": {
          "$ref": "#/definitions/WorkerLogLevel",
          "default": "INFO"
        },
        "type": {
          "description": "Type of the service",
          "type": "string",
          "pattern": "([wW][eE][bB][dD][aA]/)?[cC][oO][nN][sS][oO][lL][eE][lL][oO][gG][gG][eE][rR]"
        }
      },
      "required": [
        "type"
      ]
    },
    "ServiceType$webda$memorylogger": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "number"
        },
        "logLevel": {
          "$ref": "#/definitions/WorkerLogLevel",
          "default": "INFO"
        },
        "type": {
          "description": "Type of the service",
          "type": "string",
          "pattern": "([wW][eE][bB][dD][aA]/)?[mM][eE][mM][oO][rR][yY][lL][oO][gG][gG][eE][rR]"
        }
      },
      "required": [
        "type"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}