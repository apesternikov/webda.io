{
  "moddas": {
    "webda/configurationservice": "lib/services/configuration:default",
    "webda/consolelogger": "lib/utils/logger:ConsoleLoggerService",
    "webda/cookiesessionmanager": "lib/utils/session:CookieSessionManager",
    "webda/cronservice": "lib/services/cron:CronService",
    "webda/cryptoservice": "lib/services/cryptoservice:default",
    "webda/filelogger": "lib/utils/logger:FileLoggerService",
    "webda/memorylogger": "lib/utils/logger:MemoryLoggerService",
    "webda/memoryqueue": "lib/queues/memoryqueue:MemoryQueue",
    "webda/memorystore": "lib/stores/memory:MemoryStore",
    "webda/prometheusservice": "lib/services/prometheus:PrometheusService",
    "webda/resourceservice": "lib/services/resource:default"
  },
  "beans": {},
  "models": {
    "webda/comment": "lib/models/comment:Comment",
    "webda/coremodel": "lib/models/coremodel:CoreModel",
    "webda/ident": "lib/models/ident:Ident",
    "webda/ownermodel": "lib/models/ownermodel:OwnerModel",
    "webda/registryentry": "lib/core:RegistryEntry",
    "webda/securecookie": "lib/utils/cookie:SecureCookie",
    "webda/session": "lib/utils/session:Session",
    "webda/user": "lib/models/user:User",
    "webda/webcontext": "lib/utils/context:WebContext"
  },
  "deployers": {},
  "schemas": {
    "webda/ownermodel": {
      "type": "object",
      "properties": {
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_user": {
          "type": "string",
          "description": "Default owner of the object",
          "readOnly": true
        },
        "public": {
          "type": "boolean",
          "description": "Define if the object is publicly readable",
          "default": false
        },
        "uuid": {
          "type": "string",
          "description": "UUID of the object"
        }
      },
      "required": [
        "uuid"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OwnerModel"
    },
    "webda/ident": {
      "type": "object",
      "properties": {
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_user": {
          "type": "string",
          "description": "Default owner of the object",
          "readOnly": true
        },
        "public": {
          "type": "boolean",
          "description": "Define if the object is publicly readable",
          "default": false
        },
        "uuid": {
          "type": "string",
          "description": "UUID of the object"
        },
        "_type": {
          "type": "string",
          "readOnly": true
        },
        "uid": {
          "type": "string"
        },
        "_lastUsed": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "_failedLogin": {
          "type": "number",
          "readOnly": true
        },
        "_lastValidationEmail": {
          "type": "number",
          "description": "If EmailIdent",
          "readOnly": true
        },
        "_validation": {
          "type": "string",
          "format": "date-time",
          "description": "When the ident was validated",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "description": "Email for this ident if it exist"
        }
      },
      "required": [
        "uid",
        "uuid"
      ],
      "description": "First basic model for Ident",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Ident"
    },
    "webda/user": {
      "type": "object",
      "properties": {
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "_user": {
          "type": "string",
          "description": "Default owner of the object",
          "readOnly": true
        },
        "public": {
          "type": "boolean",
          "description": "Define if the object is publicly readable",
          "default": false
        },
        "uuid": {
          "type": "string",
          "description": "UUID of the object"
        },
        "displayName": {
          "type": "string",
          "description": "Display name for this user"
        },
        "_lastPasswordRecovery": {
          "type": "number",
          "description": "Last time the password was recovered",
          "readOnly": true
        },
        "_roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Roles of the user",
          "readOnly": true
        },
        "_groups": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Groups for a user",
          "readOnly": true
        },
        "_avatar": {
          "type": "string",
          "description": "Define the user avatar if exists",
          "readOnly": true
        },
        "locale": {
          "type": "string",
          "description": "Contains the locale of the user if known"
        },
        "email": {
          "type": "string",
          "description": "Contain main user email if exists"
        }
      },
      "required": [
        "displayName",
        "uuid"
      ],
      "description": "First basic model for User",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User"
    },
    "webda/cryptoservice": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "To expose JWKS"
        },
        "keyActiveLifespan": {
          "type": "number",
          "description": "Number of hours a key should be used for encryption\n\nif auto-rotate is not set this"
        },
        "keyLifespan": {
          "type": "number",
          "description": "Number of hours allowed to decrypt data encrypted with this key"
        },
        "autoRotate": {
          "type": "number",
          "description": "Try to rotate keys when they expire in days"
        },
        "autoCreate": {
          "type": "boolean",
          "description": "Create first set of key if does not exist"
        },
        "asymetricType": {
          "type": "string",
          "enum": [
            "rsa",
            "dsa",
            "ec",
            "ed25519",
            "ed448",
            "x25519",
            "x448",
            "dh"
          ],
          "description": "Type of asymetric key\n\nhttps://nodejs.org/api/crypto.html#cryptogeneratekeypairsynctype-options https://nodejs.org/docs/latest-v14.x/api/crypto.html#crypto_crypto_generatekeypairsync_type_options"
        },
        "asymetricOptions": {
          "type": "object",
          "properties": {
            "modulusLength": {
              "type": "number",
              "default": 2048
            },
            "namedCurve": {
              "type": "string",
              "description": "Only if asymetricType \"ec\""
            },
            "publicKeyEncoding": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "spki",
                    "pkcs1"
                  ],
                  "default": "spki"
                },
                "format": {
                  "type": "string",
                  "const": "pem"
                }
              }
            },
            "privateKeyEncoding": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "pkcs1",
                    "pkcs8",
                    "sec1"
                  ],
                  "description": "https://nodejs.org/docs/latest-v14.x/api/crypto.html#crypto_keyobject_export_options",
                  "default": "pkcs8"
                },
                "format": {
                  "type": "string",
                  "const": "pem"
                },
                "cipher": {
                  "type": "string"
                },
                "passphrase": {
                  "type": "string"
                }
              }
            }
          },
          "description": "Options for asymetric generation"
        },
        "symetricKeyLength": {
          "type": "number",
          "default": 256
        },
        "symetricCipher": {
          "type": "string",
          "default": "aes-256-ctr"
        },
        "jwt": {
          "type": "object",
          "properties": {
            "secretOrPublicKey": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "BYTES_PER_ELEMENT": {
                      "type": "number"
                    },
                    "buffer": {
                      "$ref": "#/definitions/ArrayBufferLike"
                    },
                    "byteLength": {
                      "type": "number"
                    },
                    "byteOffset": {
                      "type": "number"
                    },
                    "length": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "BYTES_PER_ELEMENT",
                    "buffer",
                    "byteLength",
                    "byteOffset",
                    "length"
                  ],
                  "description": "Raw data is stored in instances of the Buffer class. A Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.  A Buffer cannot be resized. Valid string encodings: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'"
                },
                {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "passphrase": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "passphrase"
                  ]
                }
              ],
              "description": "Secret to use with JWT"
            },
            "algorithm": {
              "type": "string",
              "enum": [
                "HS256",
                "HS384",
                "HS512",
                "RS256",
                "RS384",
                "RS512",
                "PS256",
                "PS384",
                "PS512",
                "ES256",
                "ES384",
                "ES512"
              ],
              "description": "Algorithm for JWT token",
              "default": "HS256"
            },
            "expiresIn": {
              "type": [
                "number",
                "string"
              ],
              "description": "expressed in seconds or a string describing a time span zeit/ms.\n\nEg: 60, \"2 days\", \"10h\", \"7d\". A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default (\"120\" is equal to \"120ms\")."
            },
            "audience": {
              "type": "string",
              "description": "Audience for the jwt"
            },
            "issuer": {
              "type": "string",
              "description": "Issuer of the token"
            },
            "subject": {
              "type": "string",
              "description": "Subject for JWT"
            },
            "keyid": {}
          },
          "description": "Default JWT options"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "asymetricType",
        "keyActiveLifespan",
        "keyLifespan",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "ArrayBufferLike": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "byteLength": {
                  "type": "number"
                }
              },
              "required": [
                "byteLength"
              ]
            },
            {}
          ]
        }
      },
      "title": "CryptoService"
    },
    "webda/cookiesessionmanager": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "jwt": {
          "type": "object",
          "properties": {
            "secretOrPublicKey": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "BYTES_PER_ELEMENT": {
                      "type": "number"
                    },
                    "buffer": {
                      "$ref": "#/definitions/ArrayBufferLike"
                    },
                    "byteLength": {
                      "type": "number"
                    },
                    "byteOffset": {
                      "type": "number"
                    },
                    "length": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "BYTES_PER_ELEMENT",
                    "buffer",
                    "byteLength",
                    "byteOffset",
                    "length"
                  ],
                  "description": "Raw data is stored in instances of the Buffer class. A Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.  A Buffer cannot be resized. Valid string encodings: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'"
                },
                {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "passphrase": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "passphrase"
                  ]
                }
              ],
              "description": "Secret to use with JWT"
            },
            "algorithm": {
              "type": "string",
              "enum": [
                "HS256",
                "HS384",
                "HS512",
                "RS256",
                "RS384",
                "RS512",
                "PS256",
                "PS384",
                "PS512",
                "ES256",
                "ES384",
                "ES512"
              ],
              "description": "Algorithm for JWT token",
              "default": "HS256"
            },
            "expiresIn": {
              "type": [
                "number",
                "string"
              ],
              "description": "expressed in seconds or a string describing a time span zeit/ms.\n\nEg: 60, \"2 days\", \"10h\", \"7d\". A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default (\"120\" is equal to \"120ms\")."
            },
            "audience": {
              "type": "string",
              "description": "Audience for the jwt"
            },
            "issuer": {
              "type": "string",
              "description": "Issuer of the token"
            },
            "subject": {
              "type": "string",
              "description": "Subject for JWT"
            },
            "keyid": {}
          },
          "description": "Options for issue JWT token"
        },
        "cookie": {
          "type": "object",
          "properties": {
            "domain": {
              "type": "string",
              "description": "Specifies the value for the  {@link  https://tools.ietf.org/html/rfc6265#section-5.2.3|Domain Set-Cookie attribute } . By default, no domain is set, and most clients will consider the cookie to apply to only the current domain.",
              "default": "to request hostname"
            },
            "expires": {
              "type": "string",
              "format": "date-time",
              "description": "Specifies the `Date` object to be the value for the  {@link  https://tools.ietf.org/html/rfc6265#section-5.2.1|`Expires` `Set-Cookie` attribute } . By default, no expiration is set, and most clients will consider this a \"non-persistent cookie\" and will delete it on a condition like exiting a web browser application.\n\n*Note* the  {@link  https://tools.ietf.org/html/rfc6265#section-5.3|cookie storage model specification } \nstates that if both `expires` and `maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this, so if both are set, they should point to the same date and time."
            },
            "httpOnly": {
              "type": "boolean",
              "description": "Specifies the boolean value for the  {@link  https://tools.ietf.org/html/rfc6265#section-5.2.6|`HttpOnly` `Set-Cookie` attribute } . When truthy, the `HttpOnly` attribute is set, otherwise it is not. By default, the `HttpOnly` attribute is not set.\n\n*Note* be careful when setting this to true, as compliant clients will not allow client-side JavaScript to see the cookie in `document.cookie`.",
              "default": true
            },
            "maxAge": {
              "type": "number",
              "description": "Specifies the number (in seconds) to be the value for the `Max-Age` `Set-Cookie` attribute. The given number will be converted to an integer by rounding down. By default, no maximum age is set.\n\n*Note* the  {@link  https://tools.ietf.org/html/rfc6265#section-5.3|cookie storage model specification } \nstates that if both `expires` and `maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this, so if both are set, they should point to the same date and time.",
              "minimum": 1,
              "default": "86400 * 7"
            },
            "path": {
              "type": "string",
              "description": "Specifies the value for the  {@link  https://tools.ietf.org/html/rfc6265#section-5.2.4|`Path` `Set-Cookie` attribute } . By default, the path is considered the \"default path\".",
              "default": "/"
            },
            "sameSite": {
              "type": "string",
              "enum": [
                "none",
                "strict",
                "lax"
              ],
              "description": "Specifies the boolean or string to be the value for the  {@link  https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7|`SameSite` `Set-Cookie` attribute } .\n\n- `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n- `false` will not set the `SameSite` attribute.\n- `'lax'` will set the `SameSite` attribute to Lax for lax same site enforcement.\n- `'strict'` will set the `SameSite` attribute to Strict for strict same site enforcement.  - `'none'` will set the SameSite attribute to None for an explicit  cross-site cookie.\n\nMore information about the different enforcement levels can be found in  {@link  https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7|the specification } .\n\n*note* This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.",
              "default": "lax"
            },
            "secure": {
              "type": "boolean",
              "description": "If not set will be true if https request and false otherwise If defined it will be set to the value"
            },
            "name": {
              "type": "string",
              "description": "Name of the cookie"
            }
          },
          "description": "Cookie configuration for session"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "ArrayBufferLike": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "byteLength": {
                  "type": "number"
                }
              },
              "required": [
                "byteLength"
              ]
            },
            {}
          ]
        }
      },
      "title": "CookieSessionManager"
    },
    "webda/coremodel": {
      "type": "object",
      "properties": {
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        }
      },
      "description": "Basic Object in Webda\n\nIt is used to define a data stored Any variable starting with _ can only be set by the server Any variable starting with __ won't be exported outside of the server",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CoreModel"
    },
    "webda/registryentry": {
      "type": "object",
      "properties": {
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RegistryEntry"
    },
    "webda/configurationservice": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "checkInterval": {
          "type": "number",
          "description": "Check configuration every {checkInterval} seconds"
        },
        "source": {
          "type": "string",
          "description": "Format sourceServiceName:sourceId"
        },
        "default": {
          "description": "Default configuration to use"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "default",
        "source",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigurationService"
    },
    "webda/cronservice": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "type"
      ],
      "description": "Interface to specify the Service parameters",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CronService"
    },
    "webda/resourceservice": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content",
          "default": "resources"
        },
        "folder": {
          "type": "string",
          "description": "Folder to server",
          "default": "\".\" + url"
        },
        "rootRedirect": {
          "type": "boolean",
          "description": "Add the / root to redirect to /{url}",
          "default": false
        },
        "index": {
          "type": "string",
          "description": "Index file",
          "default": "index.html"
        },
        "indexFallback": {
          "type": "boolean",
          "description": "Return the index file for any unfound resource Useful for single page application",
          "default": true
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "type"
      ],
      "description": "ResourceService parameters",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ResourceService"
    },
    "webda/memorystore": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "model": {
          "type": "string",
          "description": "Webda model to use within the Store",
          "default": "Webda/CoreModel"
        },
        "models": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Different models managed by this store"
        },
        "asyncDelete": {
          "type": "boolean",
          "description": "async delete"
        },
        "expose": {
          "$ref": "#/definitions/ExposeParameters",
          "description": "Expose the service to an urls"
        },
        "strict": {
          "type": "boolean",
          "description": "Allow to load object that does not have the type data\n\nIf set to true, then the Store will only managed the defined _model and no model extending this one",
          "default": false
        },
        "defaultModel": {
          "type": "boolean",
          "description": "When __type model not found, use the model If strict is setup this parameter is not used",
          "default": true
        },
        "forceModel": {
          "type": "boolean",
          "description": "If set, Store will ignore the __type",
          "default": false
        },
        "slowQueryThreshold": {
          "type": "number",
          "description": "Slow query threshold",
          "default": 30000
        },
        "parent": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "condition": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "condition"
          ],
          "description": "Parent of the store\n\nIf parent is specified the url route is relative to it"
        },
        "graphql": {
          "type": "boolean",
          "description": "For future use in our GraphQL api\n\nExpose this store in the graphql"
        },
        "persistence": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "File path to save to"
            },
            "key": {
              "type": "string",
              "description": "Encryption key for AES encryption"
            },
            "delay": {
              "type": "number",
              "description": "By default only save once every 1s if modified",
              "default": 1000
            },
            "cipher": {
              "type": "string",
              "description": "cipher to use"
            }
          },
          "required": [
            "path"
          ],
          "description": "Persist the data in a file"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "asyncDelete",
        "slowQueryThreshold",
        "type"
      ],
      "description": "Memory store",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "ExposeParameters": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "URL endpoint to use to expose REST Resources API",
              "default": "service.getName().toLowerCase()"
            },
            "restrict": {
              "type": "object",
              "properties": {
                "create": {
                  "type": "boolean",
                  "description": "Do not expose the POST"
                },
                "update": {
                  "type": "boolean",
                  "description": "Do not expose the PUT and PATCH"
                },
                "get": {
                  "type": "boolean",
                  "description": "Do not expose the GET"
                },
                "delete": {
                  "type": "boolean",
                  "description": "Do not expose the DELETE"
                },
                "query": {
                  "type": "boolean",
                  "description": "Do not expose the query endpoint"
                }
              },
              "description": "You can restrict any part of the CRUD",
              "default": {}
            },
            "queryMethod": {
              "type": "string",
              "enum": [
                "PUT",
                "GET"
              ],
              "description": "For confidentiality sometimes you might prefer to expose query through PUT To avoid GET logging",
              "default": "GET"
            }
          }
        }
      },
      "title": "MemoryStore"
    },
    "webda/memorylogger": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "logLevel": {
          "$ref": "#/definitions/WorkerLogLevel",
          "description": "Specify the log level of this service"
        },
        "limit": {
          "type": "number"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "logLevel",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "WorkerLogLevel": {
          "type": "string",
          "enum": [
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "TRACE"
          ],
          "description": "LogLevel as intersection to compare with integer values"
        }
      },
      "title": "MemoryLogger"
    },
    "webda/consolelogger": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "logLevel": {
          "$ref": "#/definitions/WorkerLogLevel",
          "description": "Specify the log level of this service"
        },
        "format": {
          "type": "string"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "logLevel",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "WorkerLogLevel": {
          "type": "string",
          "enum": [
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "TRACE"
          ],
          "description": "LogLevel as intersection to compare with integer values"
        }
      },
      "title": "ConsoleLogger"
    },
    "webda/filelogger": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "logLevel": {
          "$ref": "#/definitions/WorkerLogLevel",
          "description": "Specify the log level of this service"
        },
        "format": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "sizeLimit": {
          "type": "number"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "file",
        "logLevel",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "WorkerLogLevel": {
          "type": "string",
          "enum": [
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "TRACE"
          ],
          "description": "LogLevel as intersection to compare with integer values"
        }
      },
      "title": "FileLogger"
    },
    "webda/prometheusservice": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content",
          "default": "/metrics"
        },
        "portNumber": {
          "type": "number",
          "description": "If defined will launch another http server to serve the scaper"
        },
        "bind": {
          "type": "string",
          "description": "If defined along with portNumber used to bind specific address for dedicated http server"
        },
        "includeNodeMetrics": {
          "type": "boolean",
          "description": "Include NodeJS engine metrics",
          "default": true
        },
        "includeRequestMetrics": {
          "type": "boolean",
          "description": "Include request served by Webda\n\nIt should generate common http_* metrics",
          "default": true
        },
        "partitionHistogram": {
          "type": "boolean",
          "description": "Do not partition histogram with requests labels"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels to add"
        },
        "prefix": {
          "type": "string",
          "description": "Prefix to add to metrics"
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "includeNodeMetrics",
        "includeRequestMetrics",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PrometheusService"
    },
    "webda/comment": {
      "type": "object",
      "properties": {
        "_creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Creation date",
          "readOnly": true
        },
        "_lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last update date",
          "readOnly": true
        },
        "target": {
          "$ref": "#/definitions/ModelParent%3Cclass-348499747-4896-22329-348499747-0-22353852964236%3E",
          "description": "Can be linked to any object but cannot be a root object"
        },
        "author": {
          "$ref": "#/definitions/ModelLink%3Cclass-src_models_user.ts-119-2699-src_models_user.ts-0-2700764695182%3E",
          "description": "User that posted the comment"
        },
        "title": {
          "type": "string",
          "description": "Title"
        },
        "description": {
          "type": "string",
          "description": "Comment content"
        }
      },
      "required": [
        "target",
        "author",
        "title",
        "description"
      ],
      "description": "Generic comment class",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "ModelParent<class-348499747-4896-22329-348499747-0-22353852964236>": {
          "$ref": "#/definitions/ModelLink%3Cclass-348499747-4896-22329-348499747-0-22353852964236%2Cany%3E",
          "description": "Define the parent of the model"
        },
        "ModelLink<class-348499747-4896-22329-348499747-0-22353852964236,any>": {
          "type": "object",
          "properties": {
            "set": {},
            "length": {
              "type": "number"
            },
            "get": {},
            "toString": {}
          },
          "required": [
            "get",
            "length",
            "set",
            "toString"
          ],
          "description": "Define a link to 1:n relation"
        },
        "ModelLink<class-src_models_user.ts-119-2699-src_models_user.ts-0-2700764695182>": {
          "type": "object",
          "properties": {
            "set": {},
            "length": {
              "type": "number"
            },
            "get": {},
            "toString": {}
          },
          "required": [
            "get",
            "length",
            "set",
            "toString"
          ],
          "description": "Define a link to 1:n relation"
        }
      },
      "title": "Comment"
    },
    "webda/memoryqueue": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the service"
        },
        "url": {
          "type": "string",
          "description": "URL on which to serve the content"
        },
        "workerDelayer": {
          "type": "object",
          "properties": {
            "interval": {
              "type": "number",
              "description": "Interval"
            },
            "type": {
              "type": "string",
              "description": "Type of delayer registered in WaitDelayerFactoryRegistry"
            }
          },
          "required": [
            "interval",
            "type"
          ],
          "description": "Delayer between two failed attempts to process messages"
        },
        "workerParallelism": {
          "type": "boolean",
          "description": "Define if worker should process multi message received in //",
          "default": true
        },
        "maxConsumers": {
          "type": "number",
          "description": "Max number of queue consumers Queue will auto increase to this max number if queue is loaded and it will decrease to just one consumer if no messages are available",
          "default": 10
        },
        "expire": {
          "type": "number",
          "description": "Number of seconds before droping message",
          "default": 30
        },
        "openapi": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "required": [
        "maxConsumers",
        "type"
      ],
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MemoryQueue"
    }
  },
  "graph": {
    "webda/ownermodel": {},
    "webda/ident": {
      "links": [
        {
          "attribute": "_user",
          "model": "webda/user",
          "type": "LINK"
        }
      ]
    },
    "webda/user": {
      "maps": [
        {
          "attribute": "_idents",
          "model": "webda/ident",
          "targetAttribute": "_type | uuid | email"
        }
      ]
    },
    "webda/coremodel": {},
    "webda/registryentry": {},
    "webda/comment": {
      "parent": {
        "attribute": "target",
        "model": "webda/coremodel"
      },
      "links": [
        {
          "attribute": "author",
          "model": "webda/user",
          "type": "LINK"
        }
      ]
    }
  }
}